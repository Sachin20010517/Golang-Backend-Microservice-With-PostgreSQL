version: 2.1

executors:
  default-executor:
    docker:
      - image: cimg/go:1.20  # Use CircleCI's Go image for building Go applications
    working_directory: ~/repo  # Set working directory to the repository

jobs:
  build:
    executor: default-executor
    steps:
      - checkout  # Checkout your code

      # Mount Docker socket from CircleCI host to container
      - setup_remote_docker:
          docker_layer_caching: true  # Enable Docker layer caching (optional for faster builds)
          service: docker  # This will allow access to Docker
          overwrite: true  # Allow overriding the default Docker socket setup

      # Docker login to Docker Hub
      - run:
          name: Docker Login
          command: |
            echo $CIRCLECI_DOCKER_ACCESSCODE | docker login -u $CIRCLECI_DOCKER_USERNAME --password-stdin

      # Build and push Docker image
      - run:
          name: Build & Push Docker Image
          command: |
            docker build -t $CIRCLECI_DOCKER_USERNAME/golang-pstgresql-microservice:latest .
            docker push $CIRCLECI_DOCKER_USERNAME/golang-pstgresql-microservice:latest

  deploy:
    docker:
      - image: cimg/python:3.8  # A minimal image for SSH; you can choose another image if needed
    steps:
      - checkout  # Checkout the code again for any necessary context

      # Install sshpass for SSH connection
      - run:
          name: Install sshpass
          command: sudo apt-get install sshpass -y

      # SSH to Remote VPS and execute commands
      - run:
          name: SSH to Remote VPS
          command: |
            sshpass -p $HOST_PASSWORD ssh -o StrictHostKeyChecking=no $HOST_USERNAME@$HOST_IP << 'EOF'
            export SERVER_NAME="${BE_URL}"
            export SOURCE_PORT="13662"
            export TARGET_PORT="8888"
            export DEPLOY_DIRECTORY="Golang-PostgreSQL"
            export SERVICE_NAME="golang-pstgresql-microservice"
            export DOCKER_USER_NAME=$CIRCLECI_DOCKER_USERNAME
            export REPO_NAME="golang-pstgresql-microservice"
            cd /root/
            ls
            bash ./HostScriptLatest.sh
            EOF

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build  # Ensure the build job runs first before deployment


# version: 2.1

# executors:
#   default-executor:
#     docker:
#       - image: cimg/base:stable

# jobs:
#   build-and-push:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - run:
#           name: Build & Push Docker Image
#           command: |
#             docker login -u $CIRCLECI_DOCKER_USERNAME -p $CIRCLECI_DOCKER_ACCESSCODE
#             docker build -t $CIRCLECI_DOCKER_USERNAME/employeemanagement-app1662:latest .
#             docker push $CIRCLECI_DOCKER_USERNAME/employeemanagement-app1662:latest

#   deploy-to-vps:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - run:
#           name: SSH to Remote VPS
#           command: |
#             sshpass -p $HOST_PASSWORD ssh -o StrictHostKeyChecking=no $HOST_USERNAME@$HOST_IP << 'EOF'
#             export SERVER_NAME="${BE_URL}"
#             export SOURCE_PORT="16662"
#             export TARGET_PORT="8888"
#             export DEPLOY_DIRECTORY="Bellagio"
#             export SERVICE_NAME="employeemanagement-app1662"
#             export DOCKER_USER_NAME="evolza"
#             export REPO_NAME="employeemanagement-app1662"
#             cd /root/
#             ls
#             bash ./HostScriptLatest.sh
#             EOF

# workflows:
#   version: 2
#   build-and-deploy:
#     jobs:
#       - build-and-push
#       - deploy-to-vps:
#           requires:
#             - build-and-push
